<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="310" onload="init(evt)" viewBox="0 0 1200 310" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="310" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="293.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1190" y="24.00">Search</text><text id="matched" x="1190" y="293.00"> </text><svg id="frames" x="10" width="1180" total_samples="35348"><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (12 samples, 0.03%)</title><rect x="0.0000%" y="165" width="0.0339%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="12"/><text x="0.2500%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (86 samples, 0.24%)</title><rect x="0.0339%" y="165" width="0.2433%" height="15" fill="rgb(217,0,24)" fg:x="12" fg:w="86"/><text x="0.2839%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free (100 samples, 0.28%)</title><rect x="0.2772%" y="165" width="0.2829%" height="15" fill="rgb(221,193,54)" fg:x="98" fg:w="100"/><text x="0.5272%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (16 samples, 0.05%)</title><rect x="0.5601%" y="165" width="0.0453%" height="15" fill="rgb(248,212,6)" fg:x="198" fg:w="16"/><text x="0.8101%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (89 samples, 0.25%)</title><rect x="0.6082%" y="165" width="0.2518%" height="15" fill="rgb(208,68,35)" fg:x="215" fg:w="89"/><text x="0.8582%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (33 samples, 0.09%)</title><rect x="0.8600%" y="165" width="0.0934%" height="15" fill="rgb(232,128,0)" fg:x="304" fg:w="33"/><text x="1.1100%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (13 samples, 0.04%)</title><rect x="0.9534%" y="165" width="0.0368%" height="15" fill="rgb(207,160,47)" fg:x="337" fg:w="13"/><text x="1.2034%" y="175.50"></text></g><g><title>tsp`&lt;alloc::collections::vec_deque::VecDeque&lt;T,A&gt; as core::iter::traits::collect::Extend&lt;&amp;T&gt;&gt;::extend (23 samples, 0.07%)</title><rect x="0.9902%" y="165" width="0.0651%" height="15" fill="rgb(228,23,34)" fg:x="350" fg:w="23"/><text x="1.2402%" y="175.50"></text></g><g><title>tsp`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (32 samples, 0.09%)</title><rect x="1.0552%" y="165" width="0.0905%" height="15" fill="rgb(218,30,26)" fg:x="373" fg:w="32"/><text x="1.3052%" y="175.50"></text></g><g><title>tsp`&lt;tsp::permutation::Permutations&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (25 samples, 0.07%)</title><rect x="1.1458%" y="165" width="0.0707%" height="15" fill="rgb(220,122,19)" fg:x="405" fg:w="25"/><text x="1.3958%" y="175.50"></text></g><g><title>tsp`DYLD-STUB$$free (47 samples, 0.13%)</title><rect x="1.2165%" y="165" width="0.1330%" height="15" fill="rgb(250,228,42)" fg:x="430" fg:w="47"/><text x="1.4665%" y="175.50"></text></g><g><title>tsp`DYLD-STUB$$malloc (16 samples, 0.05%)</title><rect x="1.3494%" y="165" width="0.0453%" height="15" fill="rgb(240,193,28)" fg:x="477" fg:w="16"/><text x="1.5994%" y="175.50"></text></g><g><title>tsp`__rdl_alloc (8 samples, 0.02%)</title><rect x="1.3947%" y="165" width="0.0226%" height="15" fill="rgb(216,20,37)" fg:x="493" fg:w="8"/><text x="1.6447%" y="175.50"></text></g><g><title>tsp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (44 samples, 0.12%)</title><rect x="1.4230%" y="165" width="0.1245%" height="15" fill="rgb(206,188,39)" fg:x="503" fg:w="44"/><text x="1.6730%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (18 samples, 0.05%)</title><rect x="4.1190%" y="133" width="0.0509%" height="15" fill="rgb(217,207,13)" fg:x="1456" fg:w="18"/><text x="4.3690%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (149 samples, 0.42%)</title><rect x="4.3199%" y="117" width="0.4215%" height="15" fill="rgb(231,73,38)" fg:x="1527" fg:w="149"/><text x="4.5699%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (49 samples, 0.14%)</title><rect x="4.6028%" y="101" width="0.1386%" height="15" fill="rgb(225,20,46)" fg:x="1627" fg:w="49"/><text x="4.8528%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (346 samples, 0.98%)</title><rect x="3.8220%" y="149" width="0.9788%" height="15" fill="rgb(210,31,41)" fg:x="1351" fg:w="346"/><text x="4.0720%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (223 samples, 0.63%)</title><rect x="4.1700%" y="133" width="0.6309%" height="15" fill="rgb(221,200,47)" fg:x="1474" fg:w="223"/><text x="4.4200%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (21 samples, 0.06%)</title><rect x="4.7414%" y="117" width="0.0594%" height="15" fill="rgb(226,26,5)" fg:x="1676" fg:w="21"/><text x="4.9914%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (31 samples, 0.09%)</title><rect x="4.8008%" y="149" width="0.0877%" height="15" fill="rgb(249,33,26)" fg:x="1697" fg:w="31"/><text x="5.0508%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (236 samples, 0.67%)</title><rect x="6.3964%" y="133" width="0.6676%" height="15" fill="rgb(235,183,28)" fg:x="2261" fg:w="236"/><text x="6.6464%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (16 samples, 0.05%)</title><rect x="7.0640%" y="133" width="0.0453%" height="15" fill="rgb(221,5,38)" fg:x="2497" fg:w="16"/><text x="7.3140%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free (1,024 samples, 2.90%)</title><rect x="4.8885%" y="149" width="2.8969%" height="15" fill="rgb(247,18,42)" fg:x="1728" fg:w="1024"/><text x="5.1385%" y="159.50">li..</text></g><g><title>libsystem_malloc.dylib`szone_size (239 samples, 0.68%)</title><rect x="7.1093%" y="133" width="0.6761%" height="15" fill="rgb(241,131,45)" fg:x="2513" fg:w="239"/><text x="7.3593%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (218 samples, 0.62%)</title><rect x="7.1687%" y="117" width="0.6167%" height="15" fill="rgb(249,31,29)" fg:x="2534" fg:w="218"/><text x="7.4187%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (486 samples, 1.37%)</title><rect x="7.7854%" y="149" width="1.3749%" height="15" fill="rgb(225,111,53)" fg:x="2752" fg:w="486"/><text x="8.0354%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (336 samples, 0.95%)</title><rect x="8.2098%" y="133" width="0.9505%" height="15" fill="rgb(238,160,17)" fg:x="2902" fg:w="336"/><text x="8.4598%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (191 samples, 0.54%)</title><rect x="8.6200%" y="117" width="0.5403%" height="15" fill="rgb(214,148,48)" fg:x="3047" fg:w="191"/><text x="8.8700%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (39 samples, 0.11%)</title><rect x="9.1603%" y="149" width="0.1103%" height="15" fill="rgb(232,36,49)" fg:x="3238" fg:w="39"/><text x="9.4103%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (194 samples, 0.55%)</title><rect x="9.2707%" y="149" width="0.5488%" height="15" fill="rgb(209,103,24)" fg:x="3277" fg:w="194"/><text x="9.5207%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (7 samples, 0.02%)</title><rect x="9.8195%" y="149" width="0.0198%" height="15" fill="rgb(229,88,8)" fg:x="3471" fg:w="7"/><text x="10.0695%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (81 samples, 0.23%)</title><rect x="9.8393%" y="149" width="0.2292%" height="15" fill="rgb(213,181,19)" fg:x="3478" fg:w="81"/><text x="10.0893%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (41 samples, 0.12%)</title><rect x="10.0685%" y="149" width="0.1160%" height="15" fill="rgb(254,191,54)" fg:x="3559" fg:w="41"/><text x="10.3185%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (37 samples, 0.10%)</title><rect x="10.1845%" y="149" width="0.1047%" height="15" fill="rgb(241,83,37)" fg:x="3600" fg:w="37"/><text x="10.4345%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (37 samples, 0.10%)</title><rect x="10.2891%" y="149" width="0.1047%" height="15" fill="rgb(233,36,39)" fg:x="3637" fg:w="37"/><text x="10.5391%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (67 samples, 0.19%)</title><rect x="10.3938%" y="149" width="0.1895%" height="15" fill="rgb(226,3,54)" fg:x="3674" fg:w="67"/><text x="10.6438%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`realloc (32 samples, 0.09%)</title><rect x="11.8111%" y="133" width="0.0905%" height="15" fill="rgb(245,192,40)" fg:x="4175" fg:w="32"/><text x="12.0611%" y="143.50"></text></g><g><title>tsp`DYLD-STUB$$realloc (14 samples, 0.04%)</title><rect x="11.9017%" y="133" width="0.0396%" height="15" fill="rgb(238,167,29)" fg:x="4207" fg:w="14"/><text x="12.1517%" y="143.50"></text></g><g><title>tsp`__rdl_realloc (8 samples, 0.02%)</title><rect x="11.9413%" y="133" width="0.0226%" height="15" fill="rgb(232,182,51)" fg:x="4221" fg:w="8"/><text x="12.1913%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (11 samples, 0.03%)</title><rect x="12.0120%" y="117" width="0.0311%" height="15" fill="rgb(231,60,39)" fg:x="4246" fg:w="11"/><text x="12.2620%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (34 samples, 0.10%)</title><rect x="12.0431%" y="117" width="0.0962%" height="15" fill="rgb(208,69,12)" fg:x="4257" fg:w="34"/><text x="12.2931%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_realloc (24 samples, 0.07%)</title><rect x="12.4222%" y="101" width="0.0679%" height="15" fill="rgb(235,93,37)" fg:x="4391" fg:w="24"/><text x="12.6722%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_memmove (12 samples, 0.03%)</title><rect x="12.7164%" y="85" width="0.0339%" height="15" fill="rgb(213,116,39)" fg:x="4495" fg:w="12"/><text x="12.9664%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free (24 samples, 0.07%)</title><rect x="12.7504%" y="85" width="0.0679%" height="15" fill="rgb(222,207,29)" fg:x="4507" fg:w="24"/><text x="13.0004%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (8 samples, 0.02%)</title><rect x="12.8183%" y="85" width="0.0226%" height="15" fill="rgb(206,96,30)" fg:x="4531" fg:w="8"/><text x="13.0683%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (19 samples, 0.05%)</title><rect x="12.8409%" y="85" width="0.0538%" height="15" fill="rgb(218,138,4)" fg:x="4539" fg:w="19"/><text x="13.0909%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (83 samples, 0.23%)</title><rect x="12.8946%" y="85" width="0.2348%" height="15" fill="rgb(250,191,14)" fg:x="4558" fg:w="83"/><text x="13.1446%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (11 samples, 0.03%)</title><rect x="13.3190%" y="69" width="0.0311%" height="15" fill="rgb(239,60,40)" fg:x="4708" fg:w="11"/><text x="13.5690%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free (27 samples, 0.08%)</title><rect x="13.3501%" y="69" width="0.0764%" height="15" fill="rgb(206,27,48)" fg:x="4719" fg:w="27"/><text x="13.6001%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (103 samples, 0.29%)</title><rect x="13.4265%" y="69" width="0.2914%" height="15" fill="rgb(225,35,8)" fg:x="4746" fg:w="103"/><text x="13.6765%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (182 samples, 0.51%)</title><rect x="13.8197%" y="53" width="0.5149%" height="15" fill="rgb(250,213,24)" fg:x="4885" fg:w="182"/><text x="14.0697%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (50 samples, 0.14%)</title><rect x="14.1932%" y="37" width="0.1415%" height="15" fill="rgb(247,123,22)" fg:x="5017" fg:w="50"/><text x="14.4432%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (243 samples, 0.69%)</title><rect x="13.7179%" y="69" width="0.6875%" height="15" fill="rgb(231,138,38)" fg:x="4849" fg:w="243"/><text x="13.9679%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (25 samples, 0.07%)</title><rect x="14.3346%" y="53" width="0.0707%" height="15" fill="rgb(231,145,46)" fg:x="5067" fg:w="25"/><text x="14.5846%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (571 samples, 1.62%)</title><rect x="13.1295%" y="85" width="1.6154%" height="15" fill="rgb(251,118,11)" fg:x="4641" fg:w="571"/><text x="13.3795%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (120 samples, 0.34%)</title><rect x="14.4053%" y="69" width="0.3395%" height="15" fill="rgb(217,147,25)" fg:x="5092" fg:w="120"/><text x="14.6553%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (832 samples, 2.35%)</title><rect x="12.4901%" y="101" width="2.3537%" height="15" fill="rgb(247,81,37)" fg:x="4415" fg:w="832"/><text x="12.7401%" y="111.50">l..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (35 samples, 0.10%)</title><rect x="14.7448%" y="85" width="0.0990%" height="15" fill="rgb(209,12,38)" fg:x="5212" fg:w="35"/><text x="14.9948%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (130 samples, 0.37%)</title><rect x="14.8438%" y="101" width="0.3678%" height="15" fill="rgb(227,1,9)" fg:x="5247" fg:w="130"/><text x="15.0938%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (35 samples, 0.10%)</title><rect x="15.2116%" y="101" width="0.0990%" height="15" fill="rgb(248,47,43)" fg:x="5377" fg:w="35"/><text x="15.4616%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`realloc (1,123 samples, 3.18%)</title><rect x="12.1393%" y="117" width="3.1770%" height="15" fill="rgb(221,10,30)" fg:x="4291" fg:w="1123"/><text x="12.3893%" y="127.50">lib..</text></g><g><title>tsp`&lt;alloc::collections::vec_deque::VecDeque&lt;T,A&gt; as core::iter::traits::collect::Extend&lt;&amp;T&gt;&gt;::extend (1,676 samples, 4.74%)</title><rect x="10.5833%" y="149" width="4.7414%" height="15" fill="rgb(210,229,1)" fg:x="3741" fg:w="1676"/><text x="10.8333%" y="159.50">tsp`&lt;a..</text></g><g><title>tsp`alloc::raw_vec::finish_grow (1,188 samples, 3.36%)</title><rect x="11.9639%" y="133" width="3.3609%" height="15" fill="rgb(222,148,37)" fg:x="4229" fg:w="1188"/><text x="12.2139%" y="143.50">tsp..</text></g><g><title>tsp`&lt;T as core::any::Any&gt;::type_id (559 samples, 1.58%)</title><rect x="22.3124%" y="133" width="1.5814%" height="15" fill="rgb(234,67,33)" fg:x="7887" fg:w="559"/><text x="22.5624%" y="143.50"></text></g><g><title>tsp`&lt;internment::container::Arena::with::hash_of_type::HasherForTypeId as core::hash::Hasher&gt;::write_u64 (188 samples, 0.53%)</title><rect x="23.8939%" y="133" width="0.5319%" height="15" fill="rgb(247,98,35)" fg:x="8446" fg:w="188"/><text x="24.1439%" y="143.50"></text></g><g><title>tsp`internment::boxedset::HashSet&lt;P&gt;::get (354 samples, 1.00%)</title><rect x="24.4257%" y="133" width="1.0015%" height="15" fill="rgb(247,138,52)" fg:x="8634" fg:w="354"/><text x="24.6757%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (4,264 samples, 12.06%)</title><rect x="60.9794%" y="117" width="12.0629%" height="15" fill="rgb(213,79,30)" fg:x="21555" fg:w="4264"/><text x="61.2294%" y="127.50">libsystem_platform..</text></g><g><title>tsp`DYLD-STUB$$memcmp (304 samples, 0.86%)</title><rect x="73.0423%" y="117" width="0.8600%" height="15" fill="rgb(246,177,23)" fg:x="25819" fg:w="304"/><text x="73.2923%" y="127.50"></text></g><g><title>tsp`core::hash::impls::_&lt;impl core::hash::Hash for str&gt;::hash (2,167 samples, 6.13%)</title><rect x="73.9023%" y="117" width="6.1305%" height="15" fill="rgb(230,62,27)" fg:x="26123" fg:w="2167"/><text x="74.1523%" y="127.50">tsp`core..</text></g><g><title>tsp`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (24,960 samples, 70.61%)</title><rect x="15.3248%" y="149" width="70.6122%" height="15" fill="rgb(216,154,8)" fg:x="5417" fg:w="24960"/><text x="15.5748%" y="159.50">tsp`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold</text></g><g><title>tsp`internment::container::Arena::with (21,389 samples, 60.51%)</title><rect x="25.4272%" y="133" width="60.5098%" height="15" fill="rgb(244,35,45)" fg:x="8988" fg:w="21389"/><text x="25.6772%" y="143.50">tsp`internment::container::Arena::with</text></g><g><title>tsp`internment::boxedset::HashSet&lt;P&gt;::get (2,087 samples, 5.90%)</title><rect x="80.0328%" y="117" width="5.9042%" height="15" fill="rgb(251,115,12)" fg:x="28290" fg:w="2087"/><text x="80.2828%" y="127.50">tsp`inte..</text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (20 samples, 0.06%)</title><rect x="87.3854%" y="117" width="0.0566%" height="15" fill="rgb(240,54,50)" fg:x="30889" fg:w="20"/><text x="87.6354%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (151 samples, 0.43%)</title><rect x="87.5863%" y="101" width="0.4272%" height="15" fill="rgb(233,84,52)" fg:x="30960" fg:w="151"/><text x="87.8363%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (35 samples, 0.10%)</title><rect x="87.9145%" y="85" width="0.0990%" height="15" fill="rgb(207,117,47)" fg:x="31076" fg:w="35"/><text x="88.1645%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (337 samples, 0.95%)</title><rect x="87.1223%" y="133" width="0.9534%" height="15" fill="rgb(249,43,39)" fg:x="30796" fg:w="337"/><text x="87.3723%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (224 samples, 0.63%)</title><rect x="87.4420%" y="117" width="0.6337%" height="15" fill="rgb(209,38,44)" fg:x="30909" fg:w="224"/><text x="87.6920%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (22 samples, 0.06%)</title><rect x="88.0135%" y="101" width="0.0622%" height="15" fill="rgb(236,212,23)" fg:x="31111" fg:w="22"/><text x="88.2635%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (18 samples, 0.05%)</title><rect x="88.0757%" y="133" width="0.0509%" height="15" fill="rgb(242,79,21)" fg:x="31133" fg:w="18"/><text x="88.3257%" y="143.50"></text></g><g><title>tsp`&lt;tsp::permutation::Permutations&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (786 samples, 2.22%)</title><rect x="85.9370%" y="149" width="2.2236%" height="15" fill="rgb(211,96,35)" fg:x="30377" fg:w="786"/><text x="86.1870%" y="159.50">t..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (12 samples, 0.03%)</title><rect x="88.1266%" y="133" width="0.0339%" height="15" fill="rgb(253,215,40)" fg:x="31151" fg:w="12"/><text x="88.3766%" y="143.50"></text></g><g><title>tsp`DYLD-STUB$$malloc (23 samples, 0.07%)</title><rect x="88.1606%" y="149" width="0.0651%" height="15" fill="rgb(211,81,21)" fg:x="31163" fg:w="23"/><text x="88.4106%" y="159.50"></text></g><g><title>tsp`DYLD-STUB$$memcpy (15 samples, 0.04%)</title><rect x="88.2256%" y="149" width="0.0424%" height="15" fill="rgb(208,190,38)" fg:x="31186" fg:w="15"/><text x="88.4756%" y="159.50"></text></g><g><title>tsp`__rdl_alloc (10 samples, 0.03%)</title><rect x="88.2681%" y="149" width="0.0283%" height="15" fill="rgb(235,213,38)" fg:x="31201" fg:w="10"/><text x="88.5181%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (8 samples, 0.02%)</title><rect x="88.6613%" y="133" width="0.0226%" height="15" fill="rgb(237,122,38)" fg:x="31340" fg:w="8"/><text x="88.9113%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`realloc (52 samples, 0.15%)</title><rect x="88.6839%" y="133" width="0.1471%" height="15" fill="rgb(244,218,35)" fg:x="31348" fg:w="52"/><text x="88.9339%" y="143.50"></text></g><g><title>tsp`DYLD-STUB$$malloc (14 samples, 0.04%)</title><rect x="88.8311%" y="133" width="0.0396%" height="15" fill="rgb(240,68,47)" fg:x="31400" fg:w="14"/><text x="89.0811%" y="143.50"></text></g><g><title>tsp`DYLD-STUB$$realloc (42 samples, 0.12%)</title><rect x="88.8707%" y="133" width="0.1188%" height="15" fill="rgb(210,16,53)" fg:x="31414" fg:w="42"/><text x="89.1207%" y="143.50"></text></g><g><title>tsp`__rdl_alloc (10 samples, 0.03%)</title><rect x="88.9895%" y="133" width="0.0283%" height="15" fill="rgb(235,124,12)" fg:x="31456" fg:w="10"/><text x="89.2395%" y="143.50"></text></g><g><title>tsp`__rdl_realloc (32 samples, 0.09%)</title><rect x="89.0178%" y="133" width="0.0905%" height="15" fill="rgb(224,169,11)" fg:x="31466" fg:w="32"/><text x="89.2678%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (20 samples, 0.06%)</title><rect x="89.5638%" y="101" width="0.0566%" height="15" fill="rgb(250,166,2)" fg:x="31659" fg:w="20"/><text x="89.8138%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (185 samples, 0.52%)</title><rect x="89.7675%" y="85" width="0.5234%" height="15" fill="rgb(242,216,29)" fg:x="31731" fg:w="185"/><text x="90.0175%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (35 samples, 0.10%)</title><rect x="90.1918%" y="69" width="0.0990%" height="15" fill="rgb(230,116,27)" fg:x="31881" fg:w="35"/><text x="90.4418%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (383 samples, 1.08%)</title><rect x="89.2950%" y="117" width="1.0835%" height="15" fill="rgb(228,99,48)" fg:x="31564" fg:w="383"/><text x="89.5450%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (268 samples, 0.76%)</title><rect x="89.6203%" y="101" width="0.7582%" height="15" fill="rgb(253,11,6)" fg:x="31679" fg:w="268"/><text x="89.8703%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (31 samples, 0.09%)</title><rect x="90.2908%" y="85" width="0.0877%" height="15" fill="rgb(247,143,39)" fg:x="31916" fg:w="31"/><text x="90.5408%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (23 samples, 0.07%)</title><rect x="90.3785%" y="117" width="0.0651%" height="15" fill="rgb(236,97,10)" fg:x="31947" fg:w="23"/><text x="90.6285%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (24 samples, 0.07%)</title><rect x="90.4436%" y="117" width="0.0679%" height="15" fill="rgb(233,208,19)" fg:x="31970" fg:w="24"/><text x="90.6936%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (7 samples, 0.02%)</title><rect x="90.5115%" y="117" width="0.0198%" height="15" fill="rgb(216,164,2)" fg:x="31994" fg:w="7"/><text x="90.7615%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (28 samples, 0.08%)</title><rect x="90.5313%" y="117" width="0.0792%" height="15" fill="rgb(220,129,5)" fg:x="32001" fg:w="28"/><text x="90.7813%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_realloc (48 samples, 0.14%)</title><rect x="91.1989%" y="101" width="0.1358%" height="15" fill="rgb(242,17,10)" fg:x="32237" fg:w="48"/><text x="91.4489%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_memmove (24 samples, 0.07%)</title><rect x="91.7364%" y="85" width="0.0679%" height="15" fill="rgb(242,107,0)" fg:x="32427" fg:w="24"/><text x="91.9864%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free (56 samples, 0.16%)</title><rect x="91.8043%" y="85" width="0.1584%" height="15" fill="rgb(251,28,31)" fg:x="32451" fg:w="56"/><text x="92.0543%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (32 samples, 0.09%)</title><rect x="91.9628%" y="85" width="0.0905%" height="15" fill="rgb(233,223,10)" fg:x="32507" fg:w="32"/><text x="92.2128%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (11 samples, 0.03%)</title><rect x="92.0533%" y="85" width="0.0311%" height="15" fill="rgb(215,21,27)" fg:x="32539" fg:w="11"/><text x="92.3033%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (191 samples, 0.54%)</title><rect x="92.0844%" y="85" width="0.5403%" height="15" fill="rgb(232,23,21)" fg:x="32550" fg:w="191"/><text x="92.3344%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (17 samples, 0.05%)</title><rect x="93.0180%" y="69" width="0.0481%" height="15" fill="rgb(244,5,23)" fg:x="32880" fg:w="17"/><text x="93.2680%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free (40 samples, 0.11%)</title><rect x="93.0661%" y="69" width="0.1132%" height="15" fill="rgb(226,81,46)" fg:x="32897" fg:w="40"/><text x="93.3161%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (214 samples, 0.61%)</title><rect x="93.1792%" y="69" width="0.6054%" height="15" fill="rgb(247,70,30)" fg:x="32937" fg:w="214"/><text x="93.4292%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (156 samples, 0.44%)</title><rect x="93.8978%" y="53" width="0.4413%" height="15" fill="rgb(212,68,19)" fg:x="33191" fg:w="156"/><text x="94.1478%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (45 samples, 0.13%)</title><rect x="94.2118%" y="37" width="0.1273%" height="15" fill="rgb(240,187,13)" fg:x="33302" fg:w="45"/><text x="94.4618%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (221 samples, 0.63%)</title><rect x="93.7847%" y="69" width="0.6252%" height="15" fill="rgb(223,113,26)" fg:x="33151" fg:w="221"/><text x="94.0347%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (25 samples, 0.07%)</title><rect x="94.3391%" y="53" width="0.0707%" height="15" fill="rgb(206,192,2)" fg:x="33347" fg:w="25"/><text x="94.5891%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (240 samples, 0.68%)</title><rect x="94.4099%" y="69" width="0.6790%" height="15" fill="rgb(241,108,4)" fg:x="33372" fg:w="240"/><text x="94.6599%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (6 samples, 0.02%)</title><rect x="95.2161%" y="53" width="0.0170%" height="15" fill="rgb(247,173,49)" fg:x="33657" fg:w="6"/><text x="95.4661%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (87 samples, 0.25%)</title><rect x="95.6914%" y="37" width="0.2461%" height="15" fill="rgb(224,114,35)" fg:x="33825" fg:w="87"/><text x="95.9414%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (394 samples, 1.11%)</title><rect x="95.0888%" y="69" width="1.1146%" height="15" fill="rgb(245,159,27)" fg:x="33612" fg:w="394"/><text x="95.3388%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (343 samples, 0.97%)</title><rect x="95.2331%" y="53" width="0.9704%" height="15" fill="rgb(245,172,44)" fg:x="33663" fg:w="343"/><text x="95.4831%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (94 samples, 0.27%)</title><rect x="95.9375%" y="37" width="0.2659%" height="15" fill="rgb(236,23,11)" fg:x="33912" fg:w="94"/><text x="96.1875%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (1,288 samples, 3.64%)</title><rect x="92.6248%" y="85" width="3.6438%" height="15" fill="rgb(205,117,38)" fg:x="32741" fg:w="1288"/><text x="92.8748%" y="95.50">libs..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (23 samples, 0.07%)</title><rect x="96.2035%" y="69" width="0.0651%" height="15" fill="rgb(237,72,25)" fg:x="34006" fg:w="23"/><text x="96.4535%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (15 samples, 0.04%)</title><rect x="96.2685%" y="85" width="0.0424%" height="15" fill="rgb(244,70,9)" fg:x="34029" fg:w="15"/><text x="96.5185%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (1,903 samples, 5.38%)</title><rect x="91.3347%" y="101" width="5.3836%" height="15" fill="rgb(217,125,39)" fg:x="32285" fg:w="1903"/><text x="91.5847%" y="111.50">libsyst..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (144 samples, 0.41%)</title><rect x="96.3110%" y="85" width="0.4074%" height="15" fill="rgb(235,36,10)" fg:x="34044" fg:w="144"/><text x="96.5610%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (248 samples, 0.70%)</title><rect x="96.7183%" y="101" width="0.7016%" height="15" fill="rgb(251,123,47)" fg:x="34188" fg:w="248"/><text x="96.9683%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (52 samples, 0.15%)</title><rect x="97.4199%" y="101" width="0.1471%" height="15" fill="rgb(221,13,13)" fg:x="34436" fg:w="52"/><text x="97.6699%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`realloc (2,473 samples, 7.00%)</title><rect x="90.6105%" y="117" width="6.9962%" height="15" fill="rgb(238,131,9)" fg:x="32029" fg:w="2473"/><text x="90.8605%" y="127.50">libsystem..</text></g><g><title>libsystem_malloc.dylib`nanov2_size (14 samples, 0.04%)</title><rect x="97.5670%" y="101" width="0.0396%" height="15" fill="rgb(211,50,8)" fg:x="34488" fg:w="14"/><text x="97.8170%" y="111.50"></text></g><g><title>tsp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3,296 samples, 9.32%)</title><rect x="88.2964%" y="149" width="9.3244%" height="15" fill="rgb(245,182,24)" fg:x="31211" fg:w="3296"/><text x="88.5464%" y="159.50">tsp`alloc::ra..</text></g><g><title>tsp`alloc::raw_vec::finish_grow (3,009 samples, 8.51%)</title><rect x="89.1083%" y="133" width="8.5125%" height="15" fill="rgb(242,14,37)" fg:x="31498" fg:w="3009"/><text x="89.3583%" y="143.50">tsp`alloc::r..</text></g><g><title>tsp`__rdl_realloc (5 samples, 0.01%)</title><rect x="97.6067%" y="117" width="0.0141%" height="15" fill="rgb(246,228,12)" fg:x="34502" fg:w="5"/><text x="97.8567%" y="127.50"></text></g><g><title>tsp`alloc::raw_vec::finish_grow (126 samples, 0.36%)</title><rect x="97.6208%" y="149" width="0.3565%" height="15" fill="rgb(213,55,15)" fg:x="34507" fg:w="126"/><text x="97.8708%" y="159.50"></text></g><g><title>tsp`internment::container::Arena::with (713 samples, 2.02%)</title><rect x="97.9773%" y="149" width="2.0171%" height="15" fill="rgb(209,9,3)" fg:x="34633" fg:w="713"/><text x="98.2273%" y="159.50">t..</text></g><g><title>dyld`start (35,347 samples, 100.00%)</title><rect x="0.0000%" y="245" width="99.9972%" height="15" fill="rgb(230,59,30)" fg:x="0" fg:w="35347"/><text x="0.2500%" y="255.50">dyld`start</text></g><g><title>tsp`main (35,347 samples, 100.00%)</title><rect x="0.0000%" y="229" width="99.9972%" height="15" fill="rgb(209,121,21)" fg:x="0" fg:w="35347"/><text x="0.2500%" y="239.50">tsp`main</text></g><g><title>tsp`std::rt::lang_start_internal (35,347 samples, 100.00%)</title><rect x="0.0000%" y="213" width="99.9972%" height="15" fill="rgb(220,109,13)" fg:x="0" fg:w="35347"/><text x="0.2500%" y="223.50">tsp`std::rt::lang_start_internal</text></g><g><title>tsp`std::rt::lang_start::_{{closure}} (35,347 samples, 100.00%)</title><rect x="0.0000%" y="197" width="99.9972%" height="15" fill="rgb(232,18,1)" fg:x="0" fg:w="35347"/><text x="0.2500%" y="207.50">tsp`std::rt::lang_start::_{{closure}}</text></g><g><title>tsp`std::sys_common::backtrace::__rust_begin_short_backtrace (35,347 samples, 100.00%)</title><rect x="0.0000%" y="181" width="99.9972%" height="15" fill="rgb(215,41,42)" fg:x="0" fg:w="35347"/><text x="0.2500%" y="191.50">tsp`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>tsp`tsp::main (34,800 samples, 98.45%)</title><rect x="1.5475%" y="165" width="98.4497%" height="15" fill="rgb(224,123,36)" fg:x="547" fg:w="34800"/><text x="1.7975%" y="175.50">tsp`tsp::main</text></g><g><title>all (35,348 samples, 100%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(240,125,3)" fg:x="0" fg:w="35348"/><text x="0.2500%" y="271.50"></text></g></svg></svg>