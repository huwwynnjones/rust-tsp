<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="310" onload="init(evt)" viewBox="0 0 1200 310" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="310" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="293.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1190" y="24.00">Search</text><text id="matched" x="1190" y="293.00"> </text><svg id="frames" x="10" width="1180" total_samples="43115"><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (8 samples, 0.02%)</title><rect x="0.0000%" y="165" width="0.0186%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="8"/><text x="0.2500%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (93 samples, 0.22%)</title><rect x="0.0186%" y="165" width="0.2157%" height="15" fill="rgb(217,0,24)" fg:x="8" fg:w="93"/><text x="0.2686%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free (98 samples, 0.23%)</title><rect x="0.2343%" y="165" width="0.2273%" height="15" fill="rgb(221,193,54)" fg:x="101" fg:w="98"/><text x="0.4843%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (15 samples, 0.03%)</title><rect x="0.4616%" y="165" width="0.0348%" height="15" fill="rgb(248,212,6)" fg:x="199" fg:w="15"/><text x="0.7116%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (113 samples, 0.26%)</title><rect x="0.5033%" y="165" width="0.2621%" height="15" fill="rgb(208,68,35)" fg:x="217" fg:w="113"/><text x="0.7533%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (40 samples, 0.09%)</title><rect x="0.7654%" y="165" width="0.0928%" height="15" fill="rgb(232,128,0)" fg:x="330" fg:w="40"/><text x="1.0154%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (13 samples, 0.03%)</title><rect x="0.8582%" y="165" width="0.0302%" height="15" fill="rgb(207,160,47)" fg:x="370" fg:w="13"/><text x="1.1082%" y="175.50"></text></g><g><title>tsp`&lt;alloc::collections::vec_deque::VecDeque&lt;T,A&gt; as core::iter::traits::collect::Extend&lt;&amp;T&gt;&gt;::extend (52 samples, 0.12%)</title><rect x="0.8883%" y="165" width="0.1206%" height="15" fill="rgb(228,23,34)" fg:x="383" fg:w="52"/><text x="1.1383%" y="175.50"></text></g><g><title>tsp`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (33 samples, 0.08%)</title><rect x="1.0089%" y="165" width="0.0765%" height="15" fill="rgb(218,30,26)" fg:x="435" fg:w="33"/><text x="1.2589%" y="175.50"></text></g><g><title>tsp`&lt;tsp::permutation::Permutations&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (21 samples, 0.05%)</title><rect x="1.0855%" y="165" width="0.0487%" height="15" fill="rgb(220,122,19)" fg:x="468" fg:w="21"/><text x="1.3355%" y="175.50"></text></g><g><title>tsp`DYLD-STUB$$free (47 samples, 0.11%)</title><rect x="1.1342%" y="165" width="0.1090%" height="15" fill="rgb(250,228,42)" fg:x="489" fg:w="47"/><text x="1.3842%" y="175.50"></text></g><g><title>tsp`DYLD-STUB$$malloc (25 samples, 0.06%)</title><rect x="1.2432%" y="165" width="0.0580%" height="15" fill="rgb(240,193,28)" fg:x="536" fg:w="25"/><text x="1.4932%" y="175.50"></text></g><g><title>tsp`__rdl_alloc (14 samples, 0.03%)</title><rect x="1.3012%" y="165" width="0.0325%" height="15" fill="rgb(216,20,37)" fg:x="561" fg:w="14"/><text x="1.5512%" y="175.50"></text></g><g><title>tsp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (46 samples, 0.11%)</title><rect x="1.3336%" y="165" width="0.1067%" height="15" fill="rgb(206,188,39)" fg:x="575" fg:w="46"/><text x="1.5836%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (33 samples, 0.08%)</title><rect x="3.3654%" y="133" width="0.0765%" height="15" fill="rgb(217,207,13)" fg:x="1451" fg:w="33"/><text x="3.6154%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (173 samples, 0.40%)</title><rect x="3.5533%" y="117" width="0.4013%" height="15" fill="rgb(231,73,38)" fg:x="1532" fg:w="173"/><text x="3.8033%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (46 samples, 0.11%)</title><rect x="3.8478%" y="101" width="0.1067%" height="15" fill="rgb(225,20,46)" fg:x="1659" fg:w="46"/><text x="4.0978%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (388 samples, 0.90%)</title><rect x="3.1080%" y="149" width="0.8999%" height="15" fill="rgb(210,31,41)" fg:x="1340" fg:w="388"/><text x="3.3580%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (244 samples, 0.57%)</title><rect x="3.4420%" y="133" width="0.5659%" height="15" fill="rgb(221,200,47)" fg:x="1484" fg:w="244"/><text x="3.6920%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (23 samples, 0.05%)</title><rect x="3.9545%" y="117" width="0.0533%" height="15" fill="rgb(226,26,5)" fg:x="1705" fg:w="23"/><text x="4.2045%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (24 samples, 0.06%)</title><rect x="4.0079%" y="149" width="0.0557%" height="15" fill="rgb(249,33,26)" fg:x="1728" fg:w="24"/><text x="4.2579%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (254 samples, 0.59%)</title><rect x="5.3276%" y="133" width="0.5891%" height="15" fill="rgb(235,183,28)" fg:x="2297" fg:w="254"/><text x="5.5776%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (19 samples, 0.04%)</title><rect x="5.9167%" y="133" width="0.0441%" height="15" fill="rgb(221,5,38)" fg:x="2551" fg:w="19"/><text x="6.1667%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free (961 samples, 2.23%)</title><rect x="4.0636%" y="149" width="2.2289%" height="15" fill="rgb(247,18,42)" fg:x="1752" fg:w="961"/><text x="4.3136%" y="159.50">l..</text></g><g><title>libsystem_malloc.dylib`szone_size (143 samples, 0.33%)</title><rect x="5.9608%" y="133" width="0.3317%" height="15" fill="rgb(241,131,45)" fg:x="2570" fg:w="143"/><text x="6.2108%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (121 samples, 0.28%)</title><rect x="6.0118%" y="117" width="0.2806%" height="15" fill="rgb(249,31,29)" fg:x="2592" fg:w="121"/><text x="6.2618%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (393 samples, 0.91%)</title><rect x="6.2925%" y="149" width="0.9115%" height="15" fill="rgb(225,111,53)" fg:x="2713" fg:w="393"/><text x="6.5425%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (253 samples, 0.59%)</title><rect x="6.6172%" y="133" width="0.5868%" height="15" fill="rgb(238,160,17)" fg:x="2853" fg:w="253"/><text x="6.8672%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (114 samples, 0.26%)</title><rect x="6.9396%" y="117" width="0.2644%" height="15" fill="rgb(214,148,48)" fg:x="2992" fg:w="114"/><text x="7.1896%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (51 samples, 0.12%)</title><rect x="7.2040%" y="149" width="0.1183%" height="15" fill="rgb(232,36,49)" fg:x="3106" fg:w="51"/><text x="7.4540%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (202 samples, 0.47%)</title><rect x="7.3223%" y="149" width="0.4685%" height="15" fill="rgb(209,103,24)" fg:x="3157" fg:w="202"/><text x="7.5723%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (12 samples, 0.03%)</title><rect x="7.7908%" y="149" width="0.0278%" height="15" fill="rgb(229,88,8)" fg:x="3359" fg:w="12"/><text x="8.0408%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (86 samples, 0.20%)</title><rect x="7.8186%" y="149" width="0.1995%" height="15" fill="rgb(213,181,19)" fg:x="3371" fg:w="86"/><text x="8.0686%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (46 samples, 0.11%)</title><rect x="8.0181%" y="149" width="0.1067%" height="15" fill="rgb(254,191,54)" fg:x="3457" fg:w="46"/><text x="8.2681%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (41 samples, 0.10%)</title><rect x="8.1248%" y="149" width="0.0951%" height="15" fill="rgb(241,83,37)" fg:x="3503" fg:w="41"/><text x="8.3748%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (47 samples, 0.11%)</title><rect x="8.2199%" y="149" width="0.1090%" height="15" fill="rgb(233,36,39)" fg:x="3544" fg:w="47"/><text x="8.4699%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (68 samples, 0.16%)</title><rect x="8.3289%" y="149" width="0.1577%" height="15" fill="rgb(226,3,54)" fg:x="3591" fg:w="68"/><text x="8.5789%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`realloc (25 samples, 0.06%)</title><rect x="9.6486%" y="133" width="0.0580%" height="15" fill="rgb(245,192,40)" fg:x="4160" fg:w="25"/><text x="9.8986%" y="143.50"></text></g><g><title>tsp`DYLD-STUB$$realloc (18 samples, 0.04%)</title><rect x="9.7066%" y="133" width="0.0417%" height="15" fill="rgb(238,167,29)" fg:x="4185" fg:w="18"/><text x="9.9566%" y="143.50"></text></g><g><title>tsp`__rdl_realloc (8 samples, 0.02%)</title><rect x="9.7483%" y="133" width="0.0186%" height="15" fill="rgb(232,182,51)" fg:x="4203" fg:w="8"/><text x="9.9983%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (9 samples, 0.02%)</title><rect x="9.8087%" y="117" width="0.0209%" height="15" fill="rgb(231,60,39)" fg:x="4229" fg:w="9"/><text x="10.0587%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (19 samples, 0.04%)</title><rect x="9.8295%" y="117" width="0.0441%" height="15" fill="rgb(208,69,12)" fg:x="4238" fg:w="19"/><text x="10.0795%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_realloc (20 samples, 0.05%)</title><rect x="10.1403%" y="101" width="0.0464%" height="15" fill="rgb(235,93,37)" fg:x="4372" fg:w="20"/><text x="10.3903%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_memmove (26 samples, 0.06%)</title><rect x="10.3676%" y="85" width="0.0603%" height="15" fill="rgb(213,116,39)" fg:x="4470" fg:w="26"/><text x="10.6176%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free (30 samples, 0.07%)</title><rect x="10.4279%" y="85" width="0.0696%" height="15" fill="rgb(222,207,29)" fg:x="4496" fg:w="30"/><text x="10.6779%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (14 samples, 0.03%)</title><rect x="10.4975%" y="85" width="0.0325%" height="15" fill="rgb(206,96,30)" fg:x="4526" fg:w="14"/><text x="10.7475%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (7 samples, 0.02%)</title><rect x="10.5300%" y="85" width="0.0162%" height="15" fill="rgb(218,138,4)" fg:x="4540" fg:w="7"/><text x="10.7800%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (98 samples, 0.23%)</title><rect x="10.5462%" y="85" width="0.2273%" height="15" fill="rgb(250,191,14)" fg:x="4547" fg:w="98"/><text x="10.7962%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (11 samples, 0.03%)</title><rect x="10.9289%" y="69" width="0.0255%" height="15" fill="rgb(239,60,40)" fg:x="4712" fg:w="11"/><text x="11.1789%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free (24 samples, 0.06%)</title><rect x="10.9544%" y="69" width="0.0557%" height="15" fill="rgb(206,27,48)" fg:x="4723" fg:w="24"/><text x="11.2044%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (136 samples, 0.32%)</title><rect x="11.0101%" y="69" width="0.3154%" height="15" fill="rgb(225,35,8)" fg:x="4747" fg:w="136"/><text x="11.2601%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (162 samples, 0.38%)</title><rect x="11.4183%" y="53" width="0.3757%" height="15" fill="rgb(250,213,24)" fg:x="4923" fg:w="162"/><text x="11.6683%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (47 samples, 0.11%)</title><rect x="11.6850%" y="37" width="0.1090%" height="15" fill="rgb(247,123,22)" fg:x="5038" fg:w="47"/><text x="11.9350%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (230 samples, 0.53%)</title><rect x="11.3255%" y="69" width="0.5335%" height="15" fill="rgb(231,138,38)" fg:x="4883" fg:w="230"/><text x="11.5755%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (28 samples, 0.06%)</title><rect x="11.7940%" y="53" width="0.0649%" height="15" fill="rgb(231,145,46)" fg:x="5085" fg:w="28"/><text x="12.0440%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (586 samples, 1.36%)</title><rect x="10.7735%" y="85" width="1.3592%" height="15" fill="rgb(251,118,11)" fg:x="4645" fg:w="586"/><text x="11.0235%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (118 samples, 0.27%)</title><rect x="11.8590%" y="69" width="0.2737%" height="15" fill="rgb(217,147,25)" fg:x="5113" fg:w="118"/><text x="12.1090%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (873 samples, 2.02%)</title><rect x="10.1867%" y="101" width="2.0248%" height="15" fill="rgb(247,81,37)" fg:x="4392" fg:w="873"/><text x="10.4367%" y="111.50">l..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (34 samples, 0.08%)</title><rect x="12.1327%" y="85" width="0.0789%" height="15" fill="rgb(209,12,38)" fg:x="5231" fg:w="34"/><text x="12.3827%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (111 samples, 0.26%)</title><rect x="12.2115%" y="101" width="0.2575%" height="15" fill="rgb(227,1,9)" fg:x="5265" fg:w="111"/><text x="12.4615%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (41 samples, 0.10%)</title><rect x="12.4690%" y="101" width="0.0951%" height="15" fill="rgb(248,47,43)" fg:x="5376" fg:w="41"/><text x="12.7190%" y="111.50"></text></g><g><title>tsp`&lt;alloc::collections::vec_deque::VecDeque&lt;T,A&gt; as core::iter::traits::collect::Extend&lt;&amp;T&gt;&gt;::extend (1,759 samples, 4.08%)</title><rect x="8.4866%" y="149" width="4.0798%" height="15" fill="rgb(221,10,30)" fg:x="3659" fg:w="1759"/><text x="8.7366%" y="159.50">tsp`..</text></g><g><title>tsp`alloc::raw_vec::finish_grow (1,207 samples, 2.80%)</title><rect x="9.7669%" y="133" width="2.7995%" height="15" fill="rgb(210,229,1)" fg:x="4211" fg:w="1207"/><text x="10.0169%" y="143.50">ts..</text></g><g><title>libsystem_malloc.dylib`realloc (1,161 samples, 2.69%)</title><rect x="9.8736%" y="117" width="2.6928%" height="15" fill="rgb(222,148,37)" fg:x="4257" fg:w="1161"/><text x="10.1236%" y="127.50">li..</text></g><g><title>tsp`&lt;T as core::any::Any&gt;::type_id (586 samples, 1.36%)</title><rect x="20.2482%" y="133" width="1.3592%" height="15" fill="rgb(234,67,33)" fg:x="8730" fg:w="586"/><text x="20.4982%" y="143.50"></text></g><g><title>tsp`&lt;internment::container::Arena::with::hash_of_type::HasherForTypeId as core::hash::Hasher&gt;::write_u64 (201 samples, 0.47%)</title><rect x="21.6073%" y="133" width="0.4662%" height="15" fill="rgb(247,98,35)" fg:x="9316" fg:w="201"/><text x="21.8573%" y="143.50"></text></g><g><title>tsp`&lt;internment::intern::Intern&lt;T&gt; as core::hash::Hash&gt;::hash (2,922 samples, 6.78%)</title><rect x="22.0735%" y="133" width="6.7772%" height="15" fill="rgb(247,138,52)" fg:x="9517" fg:w="2922"/><text x="22.3235%" y="143.50">tsp`&lt;inte..</text></g><g><title>tsp`core::hash::BuildHasher::hash_one (1,912 samples, 4.43%)</title><rect x="28.8507%" y="133" width="4.4347%" height="15" fill="rgb(213,79,30)" fg:x="12439" fg:w="1912"/><text x="29.1007%" y="143.50">tsp`c..</text></g><g><title>tsp`internment::boxedset::HashSet&lt;P&gt;::get (440 samples, 1.02%)</title><rect x="33.2854%" y="133" width="1.0205%" height="15" fill="rgb(246,177,23)" fg:x="14351" fg:w="440"/><text x="33.5354%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (4,707 samples, 10.92%)</title><rect x="64.9240%" y="117" width="10.9173%" height="15" fill="rgb(230,62,27)" fg:x="27992" fg:w="4707"/><text x="65.1740%" y="127.50">libsystem_platfo..</text></g><g><title>tsp`DYLD-STUB$$memcmp (332 samples, 0.77%)</title><rect x="75.8414%" y="117" width="0.7700%" height="15" fill="rgb(216,154,8)" fg:x="32699" fg:w="332"/><text x="76.0914%" y="127.50"></text></g><g><title>tsp`core::hash::impls::_&lt;impl core::hash::Hash for str&gt;::hash (1,991 samples, 4.62%)</title><rect x="76.6114%" y="117" width="4.6179%" height="15" fill="rgb(244,35,45)" fg:x="33031" fg:w="1991"/><text x="76.8614%" y="127.50">tsp`c..</text></g><g><title>tsp`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (31,490 samples, 73.04%)</title><rect x="12.5664%" y="149" width="73.0372%" height="15" fill="rgb(251,115,12)" fg:x="5418" fg:w="31490"/><text x="12.8164%" y="159.50">tsp`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold</text></g><g><title>tsp`internment::container::Arena::with (22,117 samples, 51.30%)</title><rect x="34.3059%" y="133" width="51.2977%" height="15" fill="rgb(240,54,50)" fg:x="14791" fg:w="22117"/><text x="34.5559%" y="143.50">tsp`internment::container::Arena::with</text></g><g><title>tsp`internment::boxedset::HashSet&lt;P&gt;::get (1,886 samples, 4.37%)</title><rect x="81.2293%" y="117" width="4.3743%" height="15" fill="rgb(233,84,52)" fg:x="35022" fg:w="1886"/><text x="81.4793%" y="127.50">tsp`i..</text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (19 samples, 0.04%)</title><rect x="87.0509%" y="117" width="0.0441%" height="15" fill="rgb(207,117,47)" fg:x="37532" fg:w="19"/><text x="87.3009%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (162 samples, 0.38%)</title><rect x="87.1831%" y="101" width="0.3757%" height="15" fill="rgb(249,43,39)" fg:x="37589" fg:w="162"/><text x="87.4331%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (43 samples, 0.10%)</title><rect x="87.4591%" y="85" width="0.0997%" height="15" fill="rgb(209,38,44)" fg:x="37708" fg:w="43"/><text x="87.7091%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (321 samples, 0.74%)</title><rect x="86.8561%" y="133" width="0.7445%" height="15" fill="rgb(236,212,23)" fg:x="37448" fg:w="321"/><text x="87.1061%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (218 samples, 0.51%)</title><rect x="87.0950%" y="117" width="0.5056%" height="15" fill="rgb(242,79,21)" fg:x="37551" fg:w="218"/><text x="87.3450%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (18 samples, 0.04%)</title><rect x="87.5589%" y="101" width="0.0417%" height="15" fill="rgb(211,96,35)" fg:x="37751" fg:w="18"/><text x="87.8089%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (24 samples, 0.06%)</title><rect x="87.6006%" y="133" width="0.0557%" height="15" fill="rgb(253,215,40)" fg:x="37769" fg:w="24"/><text x="87.8506%" y="143.50"></text></g><g><title>tsp`&lt;tsp::permutation::Permutations&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (890 samples, 2.06%)</title><rect x="85.6036%" y="149" width="2.0642%" height="15" fill="rgb(211,81,21)" fg:x="36908" fg:w="890"/><text x="85.8536%" y="159.50">t..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (5 samples, 0.01%)</title><rect x="87.6563%" y="133" width="0.0116%" height="15" fill="rgb(208,190,38)" fg:x="37793" fg:w="5"/><text x="87.9063%" y="143.50"></text></g><g><title>tsp`DYLD-STUB$$malloc (23 samples, 0.05%)</title><rect x="87.6679%" y="149" width="0.0533%" height="15" fill="rgb(235,213,38)" fg:x="37798" fg:w="23"/><text x="87.9179%" y="159.50"></text></g><g><title>tsp`DYLD-STUB$$memcpy (10 samples, 0.02%)</title><rect x="87.7212%" y="149" width="0.0232%" height="15" fill="rgb(237,122,38)" fg:x="37821" fg:w="10"/><text x="87.9712%" y="159.50"></text></g><g><title>tsp`__rdl_alloc (14 samples, 0.03%)</title><rect x="87.7444%" y="149" width="0.0325%" height="15" fill="rgb(244,218,35)" fg:x="37831" fg:w="14"/><text x="87.9944%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (9 samples, 0.02%)</title><rect x="88.0668%" y="133" width="0.0209%" height="15" fill="rgb(240,68,47)" fg:x="37970" fg:w="9"/><text x="88.3168%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`realloc (47 samples, 0.11%)</title><rect x="88.0900%" y="133" width="0.1090%" height="15" fill="rgb(210,16,53)" fg:x="37980" fg:w="47"/><text x="88.3400%" y="143.50"></text></g><g><title>tsp`DYLD-STUB$$malloc (20 samples, 0.05%)</title><rect x="88.1990%" y="133" width="0.0464%" height="15" fill="rgb(235,124,12)" fg:x="38027" fg:w="20"/><text x="88.4490%" y="143.50"></text></g><g><title>tsp`DYLD-STUB$$realloc (59 samples, 0.14%)</title><rect x="88.2454%" y="133" width="0.1368%" height="15" fill="rgb(224,169,11)" fg:x="38047" fg:w="59"/><text x="88.4954%" y="143.50"></text></g><g><title>tsp`__rdl_alloc (11 samples, 0.03%)</title><rect x="88.3822%" y="133" width="0.0255%" height="15" fill="rgb(250,166,2)" fg:x="38106" fg:w="11"/><text x="88.6322%" y="143.50"></text></g><g><title>tsp`__rdl_realloc (20 samples, 0.05%)</title><rect x="88.4077%" y="133" width="0.0464%" height="15" fill="rgb(242,216,29)" fg:x="38117" fg:w="20"/><text x="88.6577%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (16 samples, 0.04%)</title><rect x="88.7765%" y="101" width="0.0371%" height="15" fill="rgb(230,116,27)" fg:x="38276" fg:w="16"/><text x="89.0265%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (160 samples, 0.37%)</title><rect x="88.9319%" y="85" width="0.3711%" height="15" fill="rgb(228,99,48)" fg:x="38343" fg:w="160"/><text x="89.1819%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (44 samples, 0.10%)</title><rect x="89.2010%" y="69" width="0.1021%" height="15" fill="rgb(253,11,6)" fg:x="38459" fg:w="44"/><text x="89.4510%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (320 samples, 0.74%)</title><rect x="88.6072%" y="117" width="0.7422%" height="15" fill="rgb(247,143,39)" fg:x="38203" fg:w="320"/><text x="88.8572%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (231 samples, 0.54%)</title><rect x="88.8136%" y="101" width="0.5358%" height="15" fill="rgb(236,97,10)" fg:x="38292" fg:w="231"/><text x="89.0636%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (20 samples, 0.05%)</title><rect x="89.3030%" y="85" width="0.0464%" height="15" fill="rgb(233,208,19)" fg:x="38503" fg:w="20"/><text x="89.5530%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (28 samples, 0.06%)</title><rect x="89.3494%" y="117" width="0.0649%" height="15" fill="rgb(216,164,2)" fg:x="38523" fg:w="28"/><text x="89.5994%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (28 samples, 0.06%)</title><rect x="89.4144%" y="117" width="0.0649%" height="15" fill="rgb(220,129,5)" fg:x="38551" fg:w="28"/><text x="89.6644%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (8 samples, 0.02%)</title><rect x="89.4793%" y="117" width="0.0186%" height="15" fill="rgb(242,17,10)" fg:x="38579" fg:w="8"/><text x="89.7293%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (34 samples, 0.08%)</title><rect x="89.4979%" y="117" width="0.0789%" height="15" fill="rgb(242,107,0)" fg:x="38587" fg:w="34"/><text x="89.7479%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_realloc (45 samples, 0.10%)</title><rect x="90.0777%" y="101" width="0.1044%" height="15" fill="rgb(251,28,31)" fg:x="38837" fg:w="45"/><text x="90.3277%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_memmove (27 samples, 0.06%)</title><rect x="90.4697%" y="85" width="0.0626%" height="15" fill="rgb(233,223,10)" fg:x="39006" fg:w="27"/><text x="90.7197%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free (49 samples, 0.11%)</title><rect x="90.5323%" y="85" width="0.1136%" height="15" fill="rgb(215,21,27)" fg:x="39033" fg:w="49"/><text x="90.7823%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (47 samples, 0.11%)</title><rect x="90.6459%" y="85" width="0.1090%" height="15" fill="rgb(232,23,21)" fg:x="39082" fg:w="47"/><text x="90.8959%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (14 samples, 0.03%)</title><rect x="90.7550%" y="85" width="0.0325%" height="15" fill="rgb(244,5,23)" fg:x="39129" fg:w="14"/><text x="91.0050%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (208 samples, 0.48%)</title><rect x="90.7874%" y="85" width="0.4824%" height="15" fill="rgb(226,81,46)" fg:x="39143" fg:w="208"/><text x="91.0374%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (12 samples, 0.03%)</title><rect x="91.6131%" y="69" width="0.0278%" height="15" fill="rgb(247,70,30)" fg:x="39499" fg:w="12"/><text x="91.8631%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free (37 samples, 0.09%)</title><rect x="91.6410%" y="69" width="0.0858%" height="15" fill="rgb(212,68,19)" fg:x="39511" fg:w="37"/><text x="91.8910%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (220 samples, 0.51%)</title><rect x="91.7268%" y="69" width="0.5103%" height="15" fill="rgb(240,187,13)" fg:x="39548" fg:w="220"/><text x="91.9768%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (161 samples, 0.37%)</title><rect x="92.3252%" y="53" width="0.3734%" height="15" fill="rgb(223,113,26)" fg:x="39806" fg:w="161"/><text x="92.5752%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (35 samples, 0.08%)</title><rect x="92.6174%" y="37" width="0.0812%" height="15" fill="rgb(206,192,2)" fg:x="39932" fg:w="35"/><text x="92.8674%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (229 samples, 0.53%)</title><rect x="92.2370%" y="69" width="0.5311%" height="15" fill="rgb(241,108,4)" fg:x="39768" fg:w="229"/><text x="92.4870%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (30 samples, 0.07%)</title><rect x="92.6986%" y="53" width="0.0696%" height="15" fill="rgb(247,173,49)" fg:x="39967" fg:w="30"/><text x="92.9486%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (218 samples, 0.51%)</title><rect x="92.7682%" y="69" width="0.5056%" height="15" fill="rgb(224,114,35)" fg:x="39997" fg:w="218"/><text x="93.0182%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (12 samples, 0.03%)</title><rect x="93.3364%" y="53" width="0.0278%" height="15" fill="rgb(245,159,27)" fg:x="40242" fg:w="12"/><text x="93.5864%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (98 samples, 0.23%)</title><rect x="93.7330%" y="37" width="0.2273%" height="15" fill="rgb(245,172,44)" fg:x="40413" fg:w="98"/><text x="93.9830%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (411 samples, 0.95%)</title><rect x="93.2738%" y="69" width="0.9533%" height="15" fill="rgb(236,23,11)" fg:x="40215" fg:w="411"/><text x="93.5238%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (372 samples, 0.86%)</title><rect x="93.3643%" y="53" width="0.8628%" height="15" fill="rgb(205,117,38)" fg:x="40254" fg:w="372"/><text x="93.6143%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (115 samples, 0.27%)</title><rect x="93.9603%" y="37" width="0.2667%" height="15" fill="rgb(237,72,25)" fg:x="40511" fg:w="115"/><text x="94.2103%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (1,291 samples, 2.99%)</title><rect x="91.2699%" y="85" width="2.9943%" height="15" fill="rgb(244,70,9)" fg:x="39351" fg:w="1291"/><text x="91.5199%" y="95.50">lib..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (16 samples, 0.04%)</title><rect x="94.2271%" y="69" width="0.0371%" height="15" fill="rgb(217,125,39)" fg:x="40626" fg:w="16"/><text x="94.4771%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (16 samples, 0.04%)</title><rect x="94.2642%" y="85" width="0.0371%" height="15" fill="rgb(235,36,10)" fg:x="40642" fg:w="16"/><text x="94.5142%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (1,922 samples, 4.46%)</title><rect x="90.1821%" y="101" width="4.4578%" height="15" fill="rgb(251,123,47)" fg:x="38882" fg:w="1922"/><text x="90.4321%" y="111.50">libsy..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (146 samples, 0.34%)</title><rect x="94.3013%" y="85" width="0.3386%" height="15" fill="rgb(221,13,13)" fg:x="40658" fg:w="146"/><text x="94.5513%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (243 samples, 0.56%)</title><rect x="94.6399%" y="101" width="0.5636%" height="15" fill="rgb(238,131,9)" fg:x="40804" fg:w="243"/><text x="94.8899%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (56 samples, 0.13%)</title><rect x="95.2035%" y="101" width="0.1299%" height="15" fill="rgb(211,50,8)" fg:x="41047" fg:w="56"/><text x="95.4535%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`realloc (2,495 samples, 5.79%)</title><rect x="89.5767%" y="117" width="5.7868%" height="15" fill="rgb(245,182,24)" fg:x="38621" fg:w="2495"/><text x="89.8267%" y="127.50">libsyst..</text></g><g><title>libsystem_malloc.dylib`nanov2_size (13 samples, 0.03%)</title><rect x="95.3334%" y="101" width="0.0302%" height="15" fill="rgb(242,14,37)" fg:x="41103" fg:w="13"/><text x="95.5834%" y="111.50"></text></g><g><title>tsp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3,275 samples, 7.60%)</title><rect x="87.7769%" y="149" width="7.5960%" height="15" fill="rgb(246,228,12)" fg:x="37845" fg:w="3275"/><text x="88.0269%" y="159.50">tsp`alloc:..</text></g><g><title>tsp`alloc::raw_vec::finish_grow (2,983 samples, 6.92%)</title><rect x="88.4541%" y="133" width="6.9187%" height="15" fill="rgb(213,55,15)" fg:x="38137" fg:w="2983"/><text x="88.7041%" y="143.50">tsp`alloc..</text></g><g><title>tsp`alloc::raw_vec::finish_grow (119 samples, 0.28%)</title><rect x="95.3728%" y="149" width="0.2760%" height="15" fill="rgb(209,9,3)" fg:x="41120" fg:w="119"/><text x="95.6228%" y="159.50"></text></g><g><title>tsp`core::hash::BuildHasher::hash_one (1,065 samples, 2.47%)</title><rect x="95.6488%" y="149" width="2.4701%" height="15" fill="rgb(230,59,30)" fg:x="41239" fg:w="1065"/><text x="95.8988%" y="159.50">ts..</text></g><g><title>all (43,115 samples, 100%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(209,121,21)" fg:x="0" fg:w="43115"/><text x="0.2500%" y="271.50"></text></g><g><title>dyld`start (43,115 samples, 100.00%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(220,109,13)" fg:x="0" fg:w="43115"/><text x="0.2500%" y="255.50">dyld`start</text></g><g><title>tsp`main (43,115 samples, 100.00%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(232,18,1)" fg:x="0" fg:w="43115"/><text x="0.2500%" y="239.50">tsp`main</text></g><g><title>tsp`std::rt::lang_start_internal (43,115 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(215,41,42)" fg:x="0" fg:w="43115"/><text x="0.2500%" y="223.50">tsp`std::rt::lang_start_internal</text></g><g><title>tsp`std::rt::lang_start::_{{closure}} (43,115 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(224,123,36)" fg:x="0" fg:w="43115"/><text x="0.2500%" y="207.50">tsp`std::rt::lang_start::_{{closure}}</text></g><g><title>tsp`std::sys_common::backtrace::__rust_begin_short_backtrace (43,115 samples, 100.00%)</title><rect x="0.0000%" y="181" width="100.0000%" height="15" fill="rgb(240,125,3)" fg:x="0" fg:w="43115"/><text x="0.2500%" y="191.50">tsp`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>tsp`tsp::main (42,494 samples, 98.56%)</title><rect x="1.4403%" y="165" width="98.5597%" height="15" fill="rgb(205,98,50)" fg:x="621" fg:w="42494"/><text x="1.6903%" y="175.50">tsp`tsp::main</text></g><g><title>tsp`internment::container::Arena::with (811 samples, 1.88%)</title><rect x="98.1190%" y="149" width="1.8810%" height="15" fill="rgb(205,185,37)" fg:x="42304" fg:w="811"/><text x="98.3690%" y="159.50">t..</text></g></svg></svg>